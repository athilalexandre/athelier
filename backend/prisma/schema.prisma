// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  passwordHash String
  role        Role     @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  products    Product[]
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  price           Float
  stockQuantity   Int
  images          String
  dimensions      String?
  weight          Float?
  inspiration     String?
  materials       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  category        Category @relation(fields: [categoryId], references: [id])
  categoryId      String
  orderItems      OrderItem[]
}

model Order {
  id                 String      @id @default(uuid())
  orderNumber        String      @unique // Pode ser gerado futuramente com uma lógica mais robusta
  status             OrderStatus @default(PENDING)
  totalAmount        Float
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  
  userId             String
  user               User        @relation(fields: [userId], references: [id])

  shippingFullName   String
  shippingPostalCode String
  shippingStreet     String
  shippingNumber     String
  shippingComplement String?
  shippingNeighborhood String
  shippingCity       String
  shippingState      String
  shippingPhone      String

  paymentMethod      String
  paymentTransactionId String? // ID da transação do gateway de pagamento, se houver

  items              OrderItem[]
}

model OrderItem {
  id                String    @id @default(uuid())
  quantity          Int
  priceAtPurchase   Float // Preço unitário do produto no momento da compra
  customizationText String?

  orderId           String
  order             Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId         String
  product           Product   @relation(fields: [productId], references: [id], onDelete: Restrict)
}
